/*
Copyright 2009-2019 Charles Brej and contributors

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#-------------------------------------------------------------------------------
# Animation

Window.SetBackgroundTopColor(0.234, 0.43, 0.705);
Window.SetBackgroundBottomColor(0.16, 0.25, 0.44);

fun cache_rotate(image_index, angle)
    {
    angle += (Math.Pi * 2) * 32;
    angle %= Math.Pi * 2;
    int_angle = Math.Int((angle / (Math.Pi * 2)) * 100);
    if (global.image_cache[image_index][int_angle])
        {
        return image_cache[image_index][int_angle];
        }
    myimage = fluff_image[image_index];
    myimage = myimage.Rotate(angle);
    image_cache[image_index][int_angle] = myimage;
    return myimage;
    }

fun reposition_sprite(sprite, x, y, z, x2, y2, z2)
    {
    xy_distane = Math.Sqrt((x - x2) * (x - x2) + (y - y2) * (y - y2));
    angle_from_xy_plane = Math.ATan2(xy_distane, z - z2);
    seed_offset = 12 - Math.Sin(angle_from_xy_plane) * 50;

    image_index = fluff_image_count - 1 - Math.Int(fluff_image_count *
        (Math.Abs(angle_from_xy_plane / (Math.Pi / 2) - 1)));
    image_index = Math.Clamp(image_index, 0, fluff_image_count - 1);
    angle_around_xy = Math.ATan2(y - y2, x - x2) - Math.Pi / 2;

    myimage = cache_rotate(image_index, angle_around_xy);

    y -= myimage.GetHeight() / 2 + -1 * Math.Cos(angle_around_xy) * seed_offset;
    x -= myimage.GetWidth() / 2 - -1 * Math.Sin(angle_around_xy) * seed_offset;

    sprite.SetImage(myimage);
    sprite.SetPosition(x, y, z);
    }

window_width = Window.GetWidth();
window_height = Window.GetHeight();

logo.image = Image("special://logo");
logo.sprite = Sprite(logo.image);
logo.sprite.SetX(Window.GetWidth() / 2 - logo.image.GetWidth() / 2);
logo.sprite.SetY(Window.GetHeight() / 2 - logo.image.GetHeight() / 2);
logo.sprite.SetZ(10000);

under_logo_y = window_height / 2 + logo.image.GetHeight();

stem.image = stem.origimage = Image("stem.png");
stem.sprite = Sprite();
stem.sprite.SetX(100);  # Place in the middle of the screen
stem.sprite.SetY(Window.GetHeight() - stem.image.GetHeight());
stem.sprite.SetZ(0);

core_x = 125;
core_y = Window.GetHeight() - stem.image.GetHeight() + 15;
core_d = 15;

index = 0;
while (1)
    {
    fluff_image[index] = Image("fluff-" + index + ".png");
    if (!fluff_image[index]) break;
    index++;
    }
fluff_image_count = index;

fluff_count = 20;
for (index = 0; index < fluff_count; index++)
    {
    fluff[index].sprite = Sprite();
    distance = Math.Cos(8 + index * 1.3) * core_d;
    fluff[index].x = core_x + Math.Cos(2 + index * 100) * distance;
    fluff[index].mx = 20 + (distance - Math.Cos(2 + index * 100) * distance);
    fluff[index].y = core_y + Math.Sin(2 + index * 100) * distance;
    fluff[index].my = 0;
    fluff[index].x2 = core_x + 10 * Math.Cos(2 + index * 100) * distance;
    fluff[index].y2 = core_y + 10 * Math.Sin(2 + index * 100) * distance;
    fluff[index].z = 0;
    fluff[index].mz = 0;
    fluff[index].z2 = 250;
    }
rand = 0;

down_draft = 0;

speed_limit = 30;
damp = 15;
drag = 0.5;
speed = 1;
fun refresh()
    {
    rand++;
    down_draft = Math.Min(down_draft + 1, 150);

    stem.image = stem.origimage.Rotate(Math.Sin(rand / 40) / 20);
    stem.sprite.SetImage(stem.image);
    stem.sprite.SetX(100 + Math.Sin(Math.Sin(rand / 40) / 20) *
        stem.image.GetHeight());

    for (index = 0; index < fluff_count; index++)
        {
        for (redo = 0; redo < 2; redo++)
            {
            grind = 10 * (window_height + window_width) / Math.Sqrt(
                (fluff[index].y - window_height / 2) *
                (fluff[index].y - window_height / 2) +
                (fluff[index].x - window_width / 2) *
                (fluff[index].x - window_width / 2));

            v = (fluff[index].x2 - fluff[index].x) / 10;
            fluff[index].mx += v / damp - fluff[index].mx / grind;
            fluff[index].x += Math.Clamp(
                fluff[index].mx / damp, -speed_limit, speed_limit);
            fluff[index].x2 -= v / 7;

            v = (fluff[index].y2 - fluff[index].y) / 10;
            fluff[index].my += v / damp - fluff[index].my / grind;
            fluff[index].y += Math.Clamp(
                fluff[index].my / damp, -speed_limit, speed_limit);
            fluff[index].y2 -= v / 7;

            v = (fluff[index].z2 - fluff[index].z) / 10;
            fluff[index].mz += v / damp - fluff[index].mz / grind;
            fluff[index].z += Math.Clamp(
                fluff[index].mz / damp, -speed_limit, speed_limit);
            fluff[index].z2 -= v / 7;

            v = (fluff[index].y2 / (window_height / 2) - 1);
            fluff[index].x2 += (v * v * v + v * 3) * speed *
                (1 + Math.Sin((rand / 7 + fluff[index].z2) / 17));
#            if ((window_height - fluff[index].y) < 200)
#                {
#                fluff[index].x2 += Math.Max(
#                    20*(1 - fluff[index].x2 / window_width * 2), 0);
#                }

            v = (fluff[index].x2 / (window_width / 2) - 1);
            fluff[index].y2 -= (v * v * v * 2 + v * 3) * speed *
                (1 + Math.Cos((rand / 3 + fluff[index].x2) / 11));
            fluff[index].z2 += (v * v * v * 2 + v * 3) * speed *
                (1 + Math.Cos((rand / 3 + fluff[index].y2) / 13));

            fluff[index].x2 = Math.Clamp(fluff[index].x2, 0, window_width);
            fluff[index].y2 = Math.Clamp(fluff[index].y2, 0, window_height);
            fluff[index].z2 = Math.Clamp(fluff[index].z2, -500, 500);
            }

        reposition_sprite(fluff[index].sprite,
            fluff[index].x, fluff[index].y, fluff[index].z,
            fluff[index].x2, fluff[index].y2 - down_draft, fluff[index].z2);
        }
    }

Plymouth.SetRefreshFunction(refresh);

#-------------------------------------------------------------------------------
# Dialogue

mode = "normal";

fun dialog_setup()
    {
    local.caption;
    local.box;
    local.lock;
    local.entry;
    local.entrywide;
    local.input;

    caption.image = Image.Text("", 1, 1, 1);
    box.image = Image("box.png");
    lock.image = Image("lock.png");
    entry.image = Image("entry.png");
    entrywide.image = Image("entrywide.png");
    input.image = Image.Text("", 0, 0, 0);

    caption.x = Window.GetWidth() / 2;
    caption.y = under_logo_y + box.image.GetHeight();
    caption.z = 10000;
    caption.sprite = Sprite(caption.image);
    caption.sprite.SetPosition(caption.x, caption.y, caption.z);

    box.x = Window.GetWidth() / 2 - box.image.GetWidth() / 2;
    box.y = under_logo_y;
    box.z = 10000;
    box.sprite = Sprite(box.image);
    box.sprite.SetPosition(box.x, box.y, box.z);

    local.margin = (box.image.GetWidth() -
        lock.image.GetWidth() - entry.image.GetWidth()) / 4;

    lock.x = box.x + margin;
    lock.y = box.y + box.image.GetHeight() / 2 - lock.image.GetHeight() / 2;
    lock.z = box.z + 1;
    lock.sprite = Sprite(lock.image);
    lock.sprite.SetPosition(lock.x, lock.y, lock.z);

    entry.x = lock.x + lock.image.GetWidth() + margin;
    entry.y = box.y + box.image.GetHeight() / 2 - entry.image.GetHeight() / 2;
    entry.z = box.z + 1;
    entry.sprite = Sprite(entry.image);
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);

    entrywide.x = (window_width - entrywide.image.GetWidth()) / 2;
    entrywide.y = entry.y;
    entrywide.z = entry.z;
    entrywide.sprite = Sprite(entrywide.image);
    entrywide.sprite.SetPosition(entrywide.x, entrywide.y, entrywide.z);

    input.x = entrywide.x + 2;
    input.y = entrywide.y +
        (entrywide.image.GetHeight() - input.image.GetHeight()) / 2;
    input.z = entrywide.z + 1;
    input.sprite = Sprite(input.image);
    input.sprite.SetPosition(input.x, input.y, input.z);

    global.dialog.caption = caption;
    global.dialog.box = box;
    global.dialog.lock = lock;
    global.dialog.entry = entry;
    global.dialog.entrywide = entrywide;
    global.dialog.bullet_image = Image("bullet.png");
    global.dialog.input = input;
    hide_dialog();
    }

fun hide_dialog()
    {
    progress_box.sprite.SetOpacity(1);
    progress_bar.sprite.SetOpacity(1);

    dialog.caption.sprite.SetOpacity(0);
    dialog.box.sprite.SetOpacity(0);
    dialog.lock.sprite.SetOpacity(0);
    dialog.entry.sprite.SetOpacity(0);
    dialog.entrywide.sprite.SetOpacity(0);
    dialog.bullet = [];
    dialog.input.sprite.SetOpacity(0);
    }

fun show_dialog(prompt, bullets, input)
    {
    progress_box.sprite.SetOpacity(0);
    progress_bar.sprite.SetOpacity(0);

    dialog.caption.image = Image.Text(prompt || "", 1, 1, 1);
    dialog.caption.sprite = Sprite(dialog.caption.image);
    dialog.caption.x = (window_width - dialog.caption.image.GetWidth()) / 2;
    dialog.caption.sprite.SetPosition(
        dialog.caption.x, dialog.caption.y, dialog.caption.z);
    dialog.caption.sprite.SetOpacity(1);

    dialog.box.sprite.SetOpacity(1);
    dialog.lock.sprite.SetOpacity(bullets >= 0);
    dialog.entry.sprite.SetOpacity(bullets >= 0);
    dialog.entrywide.sprite.SetOpacity(bullets < 0);

    if (bullets >= 0)
        {
        for (local.i = 0; i < bullets; i++)
            {
            if (!dialog.bullet[i])
                {
                dialog.bullet[i].sprite = Sprite(dialog.bullet_image);
                dialog.bullet[i].x = dialog.entry.x + 1 +
                    i * (dialog.bullet_image.GetWidth() + 1);
                dialog.bullet[i].y = dialog.entry.y +
                    dialog.entry.image.GetHeight() / 2 -
                    dialog.bullet_image.GetHeight() / 2;
                dialog.bullet[i].z = dialog.entry.z + 1;
                dialog.bullet[i].sprite.SetPosition(
                    dialog.bullet[i].x, dialog.bullet[i].y, dialog.bullet[i].z);
                }
            }
        while (dialog.bullet[i])
            {
            dialog.bullet[i++] = NULL;  # Remove leftover bullets
            }

        dialog.input.sprite.SetOpacity(0);
        }
    else
        {
        dialog.bullet = [];

        dialog.input.image = Image.Text(input || "", 0, 0, 0);
        dialog.input.sprite = Sprite(dialog.input.image);
        dialog.input.sprite.SetPosition(
            dialog.input.x, dialog.input.y, dialog.input.z);
        dialog.input.sprite.SetOpacity(1);
        }

    }

dialog_setup();

fun display_normal_callback()
    {
    global.mode = "normal";
    hide_dialog();
    }

fun display_password_callback(prompt, bullets)
    {
    global.mode = "password";
    show_dialog(prompt, bullets);
    }

fun display_question_callback(prompt, input)
    {
    global.mode = "question";
    show_dialog(prompt, -1, input);
    }

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);
Plymouth.SetDisplayQuestionFunction(display_question_callback);

#-------------------------------------------------------------------------------
# Progress Bar

progress_box.image = Image("progress_box.png");
progress_box.sprite = Sprite(progress_box.image);

progress_box.x = Window.GetWidth() / 2 - progress_box.image.GetWidth() / 2;
progress_box.y = under_logo_y;
progress_box.sprite.SetPosition(progress_box.x, progress_box.y, 0);

progress_bar.original_image = Image("progress_bar.png");
progress_bar.sprite = Sprite();

progress_bar.x = Window.GetWidth() / 2 -
    progress_bar.original_image.GetWidth() / 2;
progress_bar.y = progress_box.y + (progress_box.image.GetHeight() -
    progress_bar.original_image.GetHeight()) / 2;
progress_bar.sprite.SetPosition(progress_bar.x, progress_bar.y, 1);

fun progress_callback(duration, progress)
    {
    if (progress_bar.image.GetWidth() != Math.Int(
        progress_bar.original_image.GetWidth() * progress))
        {
        progress_bar.image = progress_bar.original_image.Scale(
            progress_bar.original_image.GetWidth(progress_bar.original_image) *
            progress, progress_bar.original_image.GetHeight());
        progress_bar.sprite.SetImage(progress_bar.image);
        }
    }

Plymouth.SetBootProgressFunction(progress_callback);

#-------------------------------------------------------------------------------
# Quit

fun quit_callback()
    {
    logo.sprite.SetOpacity(1);
    }

Plymouth.SetQuitFunction(quit_callback);

#-------------------------------------------------------------------------------
# Helpers

# Split a string at a delimiter character, with an optional split limit.
# Return a dual-type value that is both a hash of substrings
# (hash keys start at 0) and the number of substrings.
#
# Inheritance is documented here:  http://brej.org/blog/?p=238
# CharAt() and SubString() are undocumented, but present in plymouth.
#
fun Split(str, delim, max)
    {
    local.parts = [];
    local.count = 0;
    local.start = 0;
    for (local.i = 0; str.CharAt(i); i++)
        {
        if (max != NULL && count == max)
            {
            continue;
            }
        if (str.CharAt(i) == delim)
            {
            parts[count++] = str.SubString(start, i);
            start = i + 1;
            }
        }
    parts[count++] = str.SubString(start, i);

    return parts | count;  # Return value inherits from both hash and number
    }

# Join multiple strings with a delimiter.
#
fun Join(parts, delim)
    {
    local.text = "";
    for (local.i = 0; parts[i]; i++)
        {
        if (text)
            {
            text = text + delim;
            }
        text = text + parts[i];
        }
    return text;
    }

# Return the offset within str where substr appears, or -1 if it is not found.
#
fun Find(str, substr)
    {
    for (local.i = 0; str.CharAt(i); i++)
        {
        local.n = 0;
        while (str.CharAt(i + n) && str.CharAt(i + n) == substr.CharAt(n))
            {
            n++;
            }
        if (!substr.CharAt(n))
            {
            return i;
            }
        }
    return -1;
    }

# Return an integer from a string, or NULL on failure
#
fun Int(str)
    {
    local.val = 0;
    local.scale = 1;

    for (local.i = 0;
        (local.char = str.CharAt(i)) != ""; i++)
        {
        if (i == 0 && char == "-")
            {
            scale = -1;
            continue;
            }
        local.digit = Find("0123456789", str.CharAt(i));
        if (digit == -1)
            {
            return NULL;
            }
        val = val * 10 + digit;
        }
    return val * scale;
    }

#-------------------------------------------------------------------------------
# Messages

message_max_count = 5;
message_sprites = [];

fun message_callback(text)
    {
    if (!text)
        {
        return;
        }

    # Parse optional message prefix
    local.parts = Split(text, ":", 1);

    # systemd-fsckd prepends "fsckd-cancel-msg:" to messages prompting for
    # keyboard input.
    if (parts[0] == "fsckd-cancel-msg" && parts[1])
        {
        text = parts[1];
        }

    # Ubuntu mountall prepends "keys:" to messages prompting for keyboard
    # input, but first offers the user some context in a message sent just
    # beforehand. (It is therefore a good thing we scroll messages instead
    # of letting each new one overwrite the previous one.)
    if (parts[0] == "keys" && parts[1])
        {
        text = parts[1];
        }

    # Scroll previous messages
    for (local.i = message_max_count - 1; i > 0; i--)
        {
        message_sprites[i] = message_sprites[i - 1];
        message_sprites[i].SetOpacity(0.75);
        }
    message_sprites[0] = Sprite(
        Image.Text(text, 1, 1, 1, null, null, "center"));

    local.offset = window_height * 0.25 -
        message_sprites[0].GetImage().GetHeight() * message_max_count;

    for (i = 0; i < message_max_count; i++)
        {
        message_sprites[i].SetPosition(
            (window_width - message_sprites[i].GetImage().GetWidth()) / 2,
            window_height - offset - message_sprites[i].GetImage().GetHeight());
        offset += message_sprites[i].GetImage().GetHeight();
        }
    }

Plymouth.SetMessageFunction(message_callback);

#-------------------------------------------------------------------------------
# Status

fsck_devs = [];     # ['devA', 'devB', ...]
fsck_percents = []; # [0, 99, ...]
fsck_lowpercent = NULL;

# Update fsck_* with a device's new percent value
fun _update_fsck_progress(dev, percent)
    {
    fsck_lowpercent = percent;
    local.foundcurrent = 0;
    local.devs = [];
    local.percents = [];
    local.devcount = 0;
    for (local.i = 0; fsck_devs[i]; i++)
        {
        if (fsck_devs[i] == dev)
            {
            foundcurrent = 1;
            if (percent >= 100)
                {
                continue;
                }
            fsck_percents[i] = percent;
            }
        devs[devcount] = fsck_devs[i];
        percents[devcount] = fsck_percents[i];
        fsck_lowpercent = Math.Min(fsck_lowpercent, percents[devcount]);
        devcount++;
        }
    if (!foundcurrent && percent < 100)
        {
        devs[devcount] = dev;
        percents[devcount] = percent;
        }
    fsck_devs = devs;
    fsck_percents = percents;
    }

fun status_update_callback(text)
    {
    # Parse message prefixes
    local.parts = Split(text, ":");

    # Ubuntu mountall (old versions) sends fsck status messages in this format:
    #   fsck:<dev>:<percent>
    # Ubuntu mountall (new versions) sends fsck status messages in this format:
    #   fsck:<dev>:<percent>:<string-template>
    # where <string-template> is "Checking disk %1$d of %2$d (%3$d%% complete)"
    # or a localized equivalent.
    #
    # This newer format with string template came from Alberto Milone:
    # https://bugs.launchpad.net/ubuntu/+source/plymouth/+bug/553954
    # https://gitlab.freedesktop.org/CameronNemo/mountall/commit/58841bdf
    #
    # Unfortunately, this requires script themes to implement template
    # processing in a language that has no built-in support for it.
    # We therefore ignore such templates. If mountall wants to display
    # localized text, it will have to expand its own templates.
    #
    if (parts[0] == "fsck" && parts[1])
        {
        _update_fsck_progress(parts[1], Int(parts[2]));

        # Set fsck status text (ignoring mountall template strings)
        if (parts[3] && Find(parts[3], "%1$d") == -1)
            {
            text = parts[3];
            }
        else
            {
            text = "Checking file system: ";
            local.devstr = Join(fsck_devs, ", ");
            if (devstr)
                {
                text += fsck_lowpercent + "%\n(" + devstr + ")";
                }
            else
                {
                text += "done.";
                }
            }
        }

    # systemd-fsckd.service sends status messages in this format:
    #   fsckd:<num_devices>:<progress>:<string>
    #
    if (parts[0] == "fsckd" && parts[3])
        {
        text = parts[3];
        }

    local.image = Image.Text(text, 1, 1, 1, 0.75, null, "center");
    global.status_sprite = Sprite(image);
    global.status_sprite.SetPosition(
        (window_width - image.GetWidth()) / 2,
        window_height - image.GetHeight(),
        1000);
    }

Plymouth.SetUpdateStatusFunction(status_update_callback);
